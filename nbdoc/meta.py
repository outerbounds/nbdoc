# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/meta.ipynb (unless otherwise specified).

__all__ = ['get_meta', 'meta_list', 'find_dupe', 'chk_dupe_title', 'chk_desc', 'chk_img', 'chk_len', 'chk_desc_len']

# Cell
from fastcore.utils import globtastic, Path, merge
from fastcore.script import call_parse
import re
import yaml
import json
import sys
from collections import Counter

# Cell
_re_fm = re.compile(r'^---\s*(.*?)---\s*', flags=re.DOTALL)


def _load_yml(yml):
    if not yml: return {}
    else: return yaml.load(yml, Loader=yaml.FullLoader)

def get_meta(fname:str):
    "get metadata and front matter from `fname`."
    txt = Path(fname).read_text()
    fm = _re_fm.findall(txt)
    ignore = 'nbdoc-seo-ignore' in txt
    n_words = len(_re_fm.sub('', txt).split())
    if not ignore:
        return merge(dict(fname=fname, n_words=n_words), _load_yml(fm[0]) if fm else {})

# Cell
def meta_list(srcdir:str):
    "Get list of all metadata for markdown files in `srcdir`."
    docs = globtastic(srcdir, file_glob='*.md',
                      skip_folder_re='^[.]',
                      skip_file_re='^[_.]')
    return docs.map(get_meta).filter()

# Cell
def find_dupe(srcdir:str, key):
    "find duplicate values in front matter."
    c = Counter()
    for m in meta_list(srcdir):
        val = m.get(key)
        if val: c.update({f'{val}': 1})

    return [el[0] for el in c.items() if el[1] >= 2] if c else []

# Cell
@call_parse
def chk_dupe_title(srcdir:str='.', #directory of files to check
            ):
    "Check for duplicate titles."
    dupes = find_dupe(srcdir, 'title')
    msg = '\n\t'.join(dupes)
    if dupes: raise Exception(f"The following titles were found in multiple posts:\n\t{msg}")

# Cell
def _checker(func, msg:str, srcdir:str):
    fnames = meta_list(srcdir).filter(func).attrgot('fname')
    files = '\n\t'.join(fnames)
    if fnames: raise Exception(f"The following files {msg}:\n\t{files}")

# Cell
def _has_no_desc(d): return 'description' not in d

@call_parse
def chk_desc(srcdir:str='.', #directory of files to check
            ):
    "Check if docs do not have the field `description` in their front matter."
    return _checker(_has_no_desc, "do not have the field `description` in their front matter", srcdir)


# Cell
def _has_no_img(d): return 'image' not in d

@call_parse
def chk_img(srcdir:str='.', #directory of files to check
            ):
    "Check if docs do not have the image `description` in their front matter."
    return _checker(_has_no_img, "do not have the image `description` in their front matter", srcdir)

# Cell
def _lt_50(d): return d['n_words'] < 50

@call_parse
def chk_len(srcdir:str='.', #directory of files to check
            ):
    "Check if docs contain less than 50 words."
    return _checker(_lt_50, "contain less than 50 words", srcdir)

# Cell
def _desc_len(d):
    desc = d.get('description', None)
    if desc: return len(desc) >= 55 and len(desc) <=300
    else: return True

@call_parse
def chk_desc_len(srcdir:str='.', #directory of files to check
            ):
    "Check if docs have a description that is not between 55 and 300 characters."
    return _checker(_desc_len, "have a description that is not between 55 and 300 characters", srcdir)